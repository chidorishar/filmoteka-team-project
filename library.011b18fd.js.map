{"mappings":"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","sources":["src/js/libraryPage.js"],"sourcesContent":["import { GalleryAPI } from './components/GalleryAPI';\nimport { PaginationAPI } from './components/PaginationAPI';\nimport { NotificationAPI } from './components/NotificationAPI';\nimport { LDStorageAPI } from './utils/LibraryDataStorageAPI';\nimport { BackendConfigStorage } from './libs/BackendConfigStorage.js';\nimport { MovieModalHandler } from './components/MovieModalHandler';\n\n// const MOVIE_INFO = {\n//   WATCHED: 'watched',\n//   QUEUED: 'queued',\n//   SEARCHED: 'searched',\n// };\nlet activeLibMode = null;\n\nlet galleryAPI = null;\nlet moviesModalHandler = null;\n\nlet moviesData = null;\nlet libraryMoviesSearchForm = null;\nlet noFoundWarningMessage = null;\nlet librarySearchFieldInput = null;\nlet isSearchActive = false;\n\n// MAIN\n(async () => {\n  try {\n    LDStorageAPI.init(true);\n    NotificationAPI.init('body', 178);\n    await BackendConfigStorage.init();\n\n    LDStorageAPI.updateActiveStorage(LDStorageAPI.MOVIE_INFO.WATCHED);\n    activeLibMode = LDStorageAPI.MOVIE_INFO.WATCHED;\n\n    moviesData = LDStorageAPI.getMoviesByPage(PaginationAPI.currentPage);\n    PaginationAPI.totalPages = LDStorageAPI.getTotalPages();\n\n    galleryAPI = new GalleryAPI(\n      '#movies-wrapper',\n      true,\n      onMovieCardClicked,\n      onRemoveMovieFromCurrentLibrary\n    );\n    //hide spinner if there aren't movies else add listener for images loading\n    moviesData?.length\n      ? galleryAPI.addOnCriticalImagesLoadedCallback(\n          onGalleryLoadedCriticalImages\n        )\n      : (document.querySelector('.loader--critical').style.display = 'none');\n    galleryAPI.renderMoviesCards(moviesData);\n    PaginationAPI.renderPagination();\n    moviesModalHandler = new MovieModalHandler(\n      galleryAPI,\n      MovieModalHandler.MODE.LIBRARY_WATCHED,\n      onMovieStatusChanged\n    );\n\n    //DOM things\n    noFoundWarningMessage = document.getElementById('library-no-movies');\n    librarySearchFieldInput = document.getElementById('library-search-input');\n    // Added event listeners\n    PaginationAPI.paginationWrapperDiv.addEventListener(\n      'click',\n      onPaginationWrapperBtnClick\n    );\n    const libButtonsWrapper = document.querySelector(\n      '.header-library__buttons'\n    );\n    libButtonsWrapper.addEventListener('click', onLibraryBtnsClick);\n    libraryMoviesSearchForm = document.getElementById(\n      'library-movies-search-form'\n    );\n    libraryMoviesSearchForm.addEventListener('submit', searchMovies);\n\n    const resizeObserver = new ResizeObserver(PaginationAPI.onWindowResize);\n    resizeObserver.observe(document.body);\n\n    //show placeholder if there are no movies\n    if (PaginationAPI.totalPages) {\n      NotificationAPI.addNotification(\n        'Showing your watched movies',\n        false,\n        3000\n      );\n      enableSearch();\n    } else disableSearch();\n  } catch (error) {\n    console.log(error.message);\n    document.querySelector('.loader--critical').style.display = 'none';\n    NotificationAPI.addNotification(\n      'Something went wrong! Here is the log: ' + error.message,\n      true\n    );\n  }\n})();\n\nfunction onGalleryLoadedCriticalImages() {\n  document.querySelector('.loader--critical').style.display = 'none';\n  document.body.classList.remove('body-clip-overflow');\n}\n\nfunction onPaginationWrapperBtnClick(e) {\n  if (e.target.nodeName !== 'BUTTON') return;\n\n  const clickedButtonEl = e.target;\n  const buttonData = clickedButtonEl.dataset.pagination;\n\n  let scrollYTo = window.innerWidth <= 767 ? 230 : 219;\n  window.scroll(0, scrollYTo);\n\n  switch (buttonData) {\n    case 'next':\n      PaginationAPI.changePageByOne(true);\n      break;\n    case 'previous':\n      PaginationAPI.changePageByOne(false);\n      break;\n    case 'number':\n      const desiredPageNumber = parseInt(clickedButtonEl.textContent);\n      if (desiredPageNumber === PaginationAPI.currentPage) return;\n      PaginationAPI.updateCurrentPage(desiredPageNumber);\n      break;\n    default:\n      return;\n  }\n\n  renderGalleryByPage();\n  PaginationAPI.renderPagination();\n}\n\nfunction renderGalleryByPage() {\n  moviesData = LDStorageAPI.getMoviesByPage(PaginationAPI.currentPage);\n  //if there isn't movies on current page - decrease page, and try again\n  if (!moviesData.length) {\n    PaginationAPI.changePageByOne(false);\n\n    //there isn't movies at all\n    if (PaginationAPI.currentPage < 1) {\n      //currently we navigate through search's results, so switch to watched/queued movies and try to show movies again\n      if (isSearchActive) {\n        isSearchActive = false;\n        PaginationAPI.currentPage = 1;\n        LDStorageAPI.updateActiveStorage(activeLibMode);\n        librarySearchFieldInput.value = '';\n        renderGalleryByPage();\n\n        return;\n      }\n\n      librarySearchFieldInput.value = '';\n      PaginationAPI.updateCurrentPage(1);\n      PaginationAPI.totalPages = 0;\n\n      disableSearch();\n      galleryAPI.renderMoviesCards(moviesData);\n      return;\n    }\n\n    renderGalleryByPage();\n  }\n\n  if (!noFoundWarningMessage.hasAttribute('style')) {\n    enableSearch();\n  }\n  PaginationAPI.totalPages = LDStorageAPI.getTotalPages();\n\n  galleryAPI.renderMoviesCards(moviesData);\n  return;\n}\n\nfunction onLibraryBtnsClick(e) {\n  const clickedEl = e.target;\n  if (clickedEl.nodeName !== 'BUTTON') return;\n\n  // resetting search field input if there is anything written in there\n  librarySearchFieldInput.value = '';\n  LDStorageAPI.lastSearchRequest = null;\n  isSearchActive = false;\n\n  const clickedLibMode =\n    clickedEl.id === 'library-watched'\n      ? LDStorageAPI.MOVIE_INFO.WATCHED\n      : LDStorageAPI.MOVIE_INFO.QUEUED;\n  if (clickedLibMode === activeLibMode) return;\n\n  const prevButtonEl = e.currentTarget.querySelector(\n    `button:not(#${clickedEl.id})`\n  );\n  prevButtonEl.classList.remove('btn-active');\n  clickedEl.classList.add('btn-active');\n\n  activeLibMode = clickedLibMode;\n  PaginationAPI.currentPage = 1;\n  LDStorageAPI.updateActiveStorage(activeLibMode);\n\n  moviesData = LDStorageAPI.getMoviesByPage(PaginationAPI.currentPage);\n  PaginationAPI.totalPages = LDStorageAPI.getTotalPages();\n\n  if (PaginationAPI.totalPages) {\n    NotificationAPI.addNotification(\n      `Showing your ${activeLibMode} movies`,\n      false,\n      3000\n    );\n    enableSearch();\n  } else disableSearch();\n\n  galleryAPI.renderMoviesCards(moviesData);\n  PaginationAPI.renderPagination();\n}\n\nfunction searchMovies(e) {\n  e.preventDefault();\n  const moviesSearchRequest = e.currentTarget.elements.query.value;\n\n  if (moviesSearchRequest === LDStorageAPI.lastSearchRequest && isSearchActive)\n    return;\n\n  //abort search status and render movies from current lib page\n  if (moviesSearchRequest === '') {\n    //current mode isn't searching - do nothing\n    if (!isSearchActive) return;\n\n    LDStorageAPI.lastSearchRequest = '';\n    isSearchActive = false;\n\n    LDStorageAPI.updateActiveStorage(activeLibMode);\n    PaginationAPI.totalPages = LDStorageAPI.getTotalPages();\n    PaginationAPI.updateCurrentPage(1);\n\n    renderGalleryByPage();\n    PaginationAPI.renderPagination();\n    return;\n  }\n\n  const foundedMovies = LDStorageAPI.searchMoviesByName(\n    moviesSearchRequest,\n    activeLibMode\n  );\n\n  if (!foundedMovies.length) {\n    NotificationAPI.addNotification(\n      `Oops, there are no results matching your search request...`,\n      true,\n      3000\n    );\n    return;\n  }\n\n  isSearchActive = true;\n  moviesData = foundedMovies;\n  NotificationAPI.addNotification(\n    `Here are the movies matching '${moviesSearchRequest}' request`,\n    false,\n    3000\n  );\n\n  LDStorageAPI.updateActiveStorage(LDStorageAPI.MOVIE_INFO.SEARCHED);\n\n  PaginationAPI.totalPages = LDStorageAPI.getTotalPages();\n  PaginationAPI.updateCurrentPage(1);\n\n  galleryAPI.renderMoviesCards(moviesData);\n  PaginationAPI.renderPagination();\n}\n\nfunction onMovieCardClicked(id) {\n  moviesModalHandler.onGalleryCardClicked(+id);\n}\n\nfunction onRemoveMovieFromCurrentLibrary(id) {\n  const action =\n    activeLibMode === LDStorageAPI.MOVIE_INFO.WATCHED\n      ? MovieModalHandler.MOVIE_ACTIONS.REMOVED_FROM_WATCHED\n      : MovieModalHandler.MOVIE_ACTIONS.REMOVED_FROM_QUEUED;\n  LDStorageAPI.removeFromLocalStorage(+id, activeLibMode);\n  onMovieStatusChanged(action);\n}\n\nfunction onMovieStatusChanged(action) {\n  let needRerender = false;\n  if (\n    (action === MovieModalHandler.MOVIE_ACTIONS.REMOVED_FROM_WATCHED ||\n      action === MovieModalHandler.MOVIE_ACTIONS.ADDED_TO_WATCHED) &&\n    activeLibMode === LDStorageAPI.MOVIE_INFO.WATCHED\n  ) {\n    // LDStorageAPI.setActiveStorage(MOVIE_INFO.WATCHED);\n    needRerender = true;\n  }\n  if (\n    (action === MovieModalHandler.MOVIE_ACTIONS.REMOVED_FROM_QUEUED ||\n      action === MovieModalHandler.MOVIE_ACTIONS.ADDED_TO_QUEUED) &&\n    activeLibMode === LDStorageAPI.MOVIE_INFO.QUEUED\n  ) {\n    // LDStorageAPI.setActiveStorage(MOVIE_INFO.QUEUED);\n    needRerender = true;\n  }\n\n  if (\n    (action === MovieModalHandler.MOVIE_ACTIONS.REMOVED_FROM_QUEUED ||\n      action === MovieModalHandler.MOVIE_ACTIONS.ADDED_TO_QUEUED ||\n      action === MovieModalHandler.MOVIE_ACTIONS.REMOVED_FROM_WATCHED ||\n      action === MovieModalHandler.MOVIE_ACTIONS.ADDED_TO_WATCHED) &&\n    isSearchActive\n  ) {\n    LDStorageAPI.searchMoviesByName(\n      LDStorageAPI.lastSearchRequest,\n      activeLibMode\n    );\n    // LDStorageAPI.setActiveStorage(MOVIE_INFO.SEARCHED);\n    needRerender = true;\n  }\n\n  if (needRerender) {\n    renderGalleryByPage();\n    PaginationAPI.renderPagination();\n  }\n}\n\nfunction enableSearch() {\n  noFoundWarningMessage.setAttribute('style', 'display: none;');\n  librarySearchFieldInput.removeAttribute('disabled');\n}\n\nfunction disableSearch() {\n  noFoundWarningMessage.removeAttribute('style');\n  librarySearchFieldInput.setAttribute('disabled', 'true');\n}\n"],"names":["$gRpj2","parcelRequire","activeLibMode","galleryAPI","moviesModalHandler","moviesData","libraryMoviesSearchForm","noFoundWarningMessage","librarySearchFieldInput","isSearchActive","onGalleryLoadedCriticalImages","document","querySelector","style","display","body","classList","remove","onPaginationWrapperBtnClick","e","target","nodeName","clickedButtonEl","buttonData","dataset","pagination","scrollYTo","window","innerWidth","scroll","PaginationAPI","changePageByOne","desiredPageNumber","parseInt","textContent","currentPage","updateCurrentPage","renderGalleryByPage","renderPagination","LDStorageAPI","getMoviesByPage","length","updateActiveStorage","value","totalPages","disableSearch","renderMoviesCards","hasAttribute","enableSearch","getTotalPages","onLibraryBtnsClick","clickedEl","lastSearchRequest","clickedLibMode","id","MOVIE_INFO","WATCHED","QUEUED","currentTarget","add","NotificationAPI","addNotification","searchMovies","preventDefault","moviesSearchRequest","elements","query","foundedMovies","searchMoviesByName","SEARCHED","onMovieCardClicked","onGalleryCardClicked","onRemoveMovieFromCurrentLibrary","action","MovieModalHandler","MOVIE_ACTIONS","REMOVED_FROM_WATCHED","REMOVED_FROM_QUEUED","removeFromLocalStorage","onMovieStatusChanged","needRerender","ADDED_TO_WATCHED","ADDED_TO_QUEUED","setAttribute","removeAttribute","init","BackendConfigStorage","GalleryAPI","addOnCriticalImagesLoadedCallback","MODE","LIBRARY_WATCHED","getElementById","paginationWrapperDiv","addEventListener","ResizeObserver","onWindowResize","observe","error","console","log","message"],"version":3,"file":"library.011b18fd.js.map"}